"""
User profile handlers for Rozdum Bot
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters

from database import get_user, update_user, get_user_tasks
from config import UserStates, CATEGORIES

logger = logging.getLogger(__name__)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user profile."""
    query = update.callback_query
    user_id = query.from_user.id if query else update.effective_user.id

    user = get_user(user_id)
    if not user:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # Count tasks
    customer_tasks = get_user_tasks(user_id, as_customer=True)
    executor_tasks = get_user_tasks(user_id, as_customer=False)

    completed_as_customer = len([t for t in customer_tasks if t['status'] == 'completed'])
    completed_as_executor = len([t for t in executor_tasks if t['status'] == 'completed'])

    # Format tags display
    tags_text = "–ë–µ–∑ —Ç–µ–≥—ñ–≤"
    if user['executor_tags']:
        try:
            if isinstance(user['executor_tags'], str):
                # Parse JSON if it's a string
                import json
                executor_tags = json.loads(user['executor_tags'])
            elif isinstance(user['executor_tags'], dict):
                executor_tags = user['executor_tags']
            else:
                executor_tags = {}
            
            if executor_tags:
                tags_display = []
                for category, category_tags in executor_tags.items():
                    if category_tags and isinstance(category_tags, list):
                        category_name = CATEGORIES.get(category, {}).get('name', category)
                        tags_list = ', '.join(category_tags)
                        tags_display.append(f"üìÇ {category_name}: {tags_list}")
                tags_text = '\n'.join(tags_display) if tags_display else "–ë–µ–∑ —Ç–µ–≥—ñ–≤"
        except (json.JSONDecodeError, AttributeError, TypeError):
            tags_text = "–ë–µ–∑ —Ç–µ–≥—ñ–≤"

    earned_balance = user.get('earned_balance', 0.0)
    available_for_withdrawal = earned_balance
    
    profile_text = f"""
üë§ <b>–í–∞—à –ü—Ä–æ—Ñ—ñ–ª—å</b>

<b>üÜî ID:</b> {user_id}
<b>üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {user['balance']:.2f} –≥—Ä–Ω
<b>üíé –ó–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ:</b> {earned_balance:.2f} –≥—Ä–Ω (–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è)
<b>üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {user['frozen_balance']:.2f} –≥—Ä–Ω
<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥:</b> {user['rating']:.1f}/5.0 ({user['reviews_count']} –≤—ñ–¥–≥—É–∫—ñ–≤)

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ó–∞–≤–¥–∞–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω–æ: {len(customer_tasks)}
‚Ä¢ –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ: {completed_as_executor}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —è–∫ –∑–∞–º–æ–≤–Ω–∏–∫: {completed_as_customer}

<b>üè∑ –¢–µ–≥–∏:</b> {tags_text}

<b>üéØ –ü—Ä–æ—Ñ—ñ–ª—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è:</b>
{'–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π' if user['executor_tags'] else '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'}
    """

    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="add_balance"),
         InlineKeyboardButton("üí∏ –í–∏–≤–µ—Å—Ç–∏", callback_data="withdraw_balance")],
        [InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å –í–∏–∫–æ–Ω–∞–≤—Ü—è", callback_data="setup_executor")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='HTML')

async def setup_executor_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Setup executor profile - choose categories."""
    query = update.callback_query
    user_id = query.from_user.id

    user = get_user(user_id)
    current_tags = set(user['executor_tags']) if user['executor_tags'] else set()
    is_working = user.get('is_working', True)
    missed_tasks = user.get('missed_tasks_count', 0)

    work_status_emoji = "üü¢" if is_working else "üî¥"
    work_status_text = "–ü—Ä–∞—Ü—é—é" if is_working else "–ù–µ –ø—Ä–∞—Ü—é—é"

    text = f"""
‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ü—Ä–æ—Ñ—ñ–ª—é –í–∏–∫–æ–Ω–∞–≤—Ü—è</b>

<b>–°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∏:</b> {work_status_emoji} {work_status_text}
{f"<b>–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–≤–¥–∞–Ω—å:</b> {missed_tasks}" if missed_tasks > 0 else ""}

–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –≤ —è–∫–∏—Ö –≤–∏ –º–∞—î—Ç–µ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑—É:
    """

    keyboard = []

    # Work status buttons
    if is_working:
        keyboard.append([InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", callback_data="set_not_working")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –ü–æ—á–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏", callback_data="set_working")])

    # Category selection - check if user has tags in this category
    user = get_user(user_id)
    user_category_tags = user.get('executor_tags', {}) if isinstance(user.get('executor_tags'), dict) else {}

    for category_key, category_data in CATEGORIES.items():
        has_category = category_key in user_category_tags and len(user_category_tags[category_key]) > 0

        emoji = "‚úÖ" if has_category else "‚≠ï"
        keyboard.append([InlineKeyboardButton(
            f"{emoji} {category_data['name']}", 
            callback_data=f"executor_category_{category_key}"
        )])

    keyboard.extend([
        [InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="save_executor_profile")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ü—Ä–æ—Ñ—ñ–ª—é", callback_data="my_profile")]
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def setup_executor_tags(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Setup executor tags for specific category."""
    query = update.callback_query
    user_id = query.from_user.id
    category_key = query.data.split('_')[-1]

    if category_key not in CATEGORIES:
        await query.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
        return

    user = get_user(user_id)
    user_tags = user['executor_tags'] if isinstance(user['executor_tags'], dict) else {}
    current_category_tags = set(user_tags.get(category_key, []))
    category_data = CATEGORIES[category_key]

    text = f"""
üéØ <b>{category_data['name']}</b>

–û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏ –≤–∞—à–æ—ó –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏:
    """

    keyboard = []
    for tag in category_data['tags']:
        emoji = "‚úÖ" if tag in current_category_tags else "‚≠ï"
        # Format Ukrainian tags properly
        tag_display = tag.replace('-', ' ').replace('_', ' ')
        if tag_display.lower() in ['python', 'javascript', 'react', 'django', 'fastapi', 'postgresql', 'powerpoint', 'keynote']:
            tag_display = tag_display.upper() if len(tag_display) <= 4 else tag_display.title()
        else:
            tag_display = tag_display.title()

        keyboard.append([InlineKeyboardButton(
            f"{emoji} {tag_display}", 
            callback_data=f"toggle_tag_{tag}"
        )])

    keyboard.extend([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="setup_executor")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def toggle_executor_tag(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Toggle executor tag on/off."""
    query = update.callback_query
    user_id = query.from_user.id
    tag = query.data.split('_', 2)[-1]

    user = get_user(user_id)
    current_tags = user['executor_tags'] if isinstance(user['executor_tags'], dict) else {}

    # Find category for this tag
    category_key = None
    for cat_key, cat_data in CATEGORIES.items():
        if tag in cat_data['tags']:
            category_key = cat_key
            break

    if not category_key:
        await query.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–µ–≥")
        return

    # Toggle tag
    tag_was_present = False
    if category_key not in current_tags:
        current_tags[category_key] = []

    if tag in current_tags[category_key]:
        current_tags[category_key].remove(tag)
        tag_was_present = True
        # Remove category if empty
        if not current_tags[category_key]:
            del current_tags[category_key]
    else:
        current_tags[category_key].append(tag)

    # Update user tags in database
    update_user(user_id, executor_tags=current_tags)

    # Rebuild the category tags display with updated data
    user = get_user(user_id)  # Get fresh user data
    user_category_tags = user.get('executor_tags', {}) if isinstance(user.get('executor_tags'), dict) else {}
    current_category_tags = set(user_category_tags.get(category_key, []))
    category_data = CATEGORIES[category_key]

    text = f"""
üéØ <b>{category_data['name']}</b>

–û–±–µ—Ä—ñ—Ç—å —Ç–µ–≥–∏ –≤–∞—à–æ—ó –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏:
    """

    keyboard = []
    for tag_name in category_data['tags']:
        emoji = "‚úÖ" if tag_name in current_category_tags else "‚≠ï"
        # Format Ukrainian tags properly
        tag_display = tag_name.replace('-', ' ').replace('_', ' ')
        if tag_display.lower() in ['python', 'javascript', 'react', 'django', 'fastapi', 'postgresql', 'powerpoint', 'keynote']:
            tag_display = tag_display.upper() if len(tag_display) <= 4 else tag_display.title()
        else:
            tag_display = tag_display.title()

        keyboard.append([InlineKeyboardButton(
            f"{emoji} {tag_display}", 
            callback_data=f"toggle_tag_{tag_name}"
        )])

    keyboard.extend([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="setup_executor")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        # Show confirmation without alert
        action_text = "–≤–∏–¥–∞–ª–µ–Ω–æ" if tag_was_present else "–¥–æ–¥–∞–Ω–æ"
        await query.answer(f"‚úÖ –¢–µ–≥ '{tag}' {action_text}")
    except Exception as e:
        logger.error(f"Error updating message in toggle_executor_tag: {e}")
        # If message update fails, just answer with confirmation
        action_text = "–≤–∏–¥–∞–ª–µ–Ω–æ" if tag_was_present else "–¥–æ–¥–∞–Ω–æ"
        await query.answer(f"‚úÖ –¢–µ–≥ '{tag}' {action_text}")

async def save_executor_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Save executor profile and return to main profile."""
    query = update.callback_query
    user_id = query.from_user.id

    user = get_user(user_id)
    tags_count = len(user['executor_tags']) if user['executor_tags'] else 0

    if tags_count == 0:
        await query.answer("‚ùå –û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–µ–≥ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏", show_alert=True)
        return

    await query.answer(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –û–±—Ä–∞–Ω–æ {tags_count} —Ç–µ–≥—ñ–≤ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏")

    # Return to profile - create new Update for profile view
    await show_profile(update, context)

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show detailed user statistics."""
    query = update.callback_query
    user_id = query.from_user.id

    customer_tasks = get_user_tasks(user_id, as_customer=True)
    executor_tasks = get_user_tasks(user_id, as_customer=False)

    # Calculate statistics
    stats = {
        'total_created': len(customer_tasks),
        'total_executed': len(executor_tasks),
        'created_completed': len([t for t in customer_tasks if t['status'] == 'completed']),
        'created_cancelled': len([t for t in customer_tasks if t['status'] == 'canceled']),
        'created_disputes': len([t for t in customer_tasks if t['status'] == 'dispute']),
        'executed_completed': len([t for t in executor_tasks if t['status'] == 'completed']),
        'executed_disputes': len([t for t in executor_tasks if t['status'] == 'dispute']),
        'active_as_customer': len([t for t in customer_tasks if t['status'] in ['searching', 'in_progress']]),
        'active_as_executor': len([t for t in executor_tasks if t['status'] in ['searching', 'in_progress']])
    }

    # Calculate earnings and spendings
    total_spent = sum(t['price'] for t in customer_tasks if t['status'] == 'completed')
    total_earned = sum(t['price'] * 0.95 for t in executor_tasks if t['status'] == 'completed')  # minus 5% commission

    stats_text = f"""
üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üíº –Ø–∫ –ó–∞–º–æ–≤–Ω–∏–∫:</b>
‚Ä¢ –í—Å—å–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {stats['total_created']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['created_completed']}
‚Ä¢ –°–∫–∞—Å–æ–≤–∞–Ω–æ: {stats['created_cancelled']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['active_as_customer']}
‚Ä¢ –°–ø–æ—Ä–∏: {stats['created_disputes']}
‚Ä¢ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} –≥—Ä–Ω

<b>üîß –Ø–∫ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:</b>
‚Ä¢ –í—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ: {stats['total_executed']}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['executed_completed']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['active_as_executor']}
‚Ä¢ –°–ø–æ—Ä–∏: {stats['executed_disputes']}
‚Ä¢ –ó–∞—Ä–æ–±–ª–µ–Ω–µ–Ω–æ: {total_earned:.2f} –≥—Ä–Ω

<b>üìà –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —è–∫ –∑–∞–º–æ–≤–Ω–∏–∫: {(stats['created_completed']/max(stats['total_created'], 1)*100):.1f}%
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —è–∫ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {(stats['executed_completed']/max(stats['total_executed'], 1)*100):.1f}%
    """

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ü—Ä–æ—Ñ—ñ–ª—é", callback_data="my_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='HTML')

async def handle_balance_operations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle balance add/withdraw operations."""
    query = update.callback_query
    operation = query.data

    if operation == "add_balance":
        text = """
üí∞ <b>–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–∞–ª–∞–Ω—Å—É</b>

–ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

–î–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:
1. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –í–∫–∞–∂—ñ—Ç—å –≤–∞—à ID: {user_id}
3. –í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è

–ù–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–ø–ª–∞—Ç–∞!
        """.format(user_id=query.from_user.id)

    elif operation == "withdraw_balance":
        user = get_user(query.from_user.id)
        available_balance = user['balance']

        text = f"""
üí∏ <b>–í–∏–≤–µ–¥–µ–Ω–Ω—è –ö–æ—à—Ç—ñ–≤</b>

–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è: {available_balance:.2f} –≥—Ä–Ω

–ù–∞ –¥–∞–Ω–æ–º—É –µ—Ç–∞–ø—ñ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

–î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:
1. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞  
2. –í–∫–∞–∂—ñ—Ç—å –≤–∞—à ID: {query.from_user.id}
3. –í–∫–∞–∂—ñ—Ç—å —Å—É–º—É —Ç–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏

–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: 50 –≥—Ä–Ω
        """

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ü—Ä–æ—Ñ—ñ–ª—é", callback_data="my_profile")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def set_work_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle work status change."""
    query = update.callback_query
    user_id = query.from_user.id

    from database import set_work_status, reset_missed_tasks

    if query.data == "set_working":
        success = set_work_status(user_id, True)
        if success:
            # Reset missed tasks counter when starting work
            reset_missed_tasks(user_id)
            await query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–ü—Ä–∞—Ü—é—é'. –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è!")
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")
    elif query.data == "set_not_working":
        success = set_work_status(user_id, False)
        if success:
            await query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '–ù–µ –ø—Ä–∞—Ü—é—é'. –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏.")
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É")

    # Refresh the executor profile page
    await setup_executor_profile(update, context)

# Handler list for main.py
profile_handlers = [
    CallbackQueryHandler(show_profile, pattern="^my_profile$"),
    CallbackQueryHandler(setup_executor_profile, pattern="^setup_executor$"),
    CallbackQueryHandler(setup_executor_tags, pattern="^executor_category_"),
    CallbackQueryHandler(toggle_executor_tag, pattern="^toggle_tag_"),
    CallbackQueryHandler(save_executor_profile, pattern="^save_executor_profile$"),
    CallbackQueryHandler(show_detailed_stats, pattern="^detailed_stats$"),
    CallbackQueryHandler(handle_balance_operations, pattern="^(add_balance|withdraw_balance)$"),
    CallbackQueryHandler(set_work_status_handler, pattern="^(set_working|set_not_working)$"),
]