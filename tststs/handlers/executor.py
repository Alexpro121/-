"""
Executor-specific handlers for Rozdum Bot
"""

import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from database import (
    get_user, get_task, update_task, update_user_balance, 
    add_review, create_dispute, get_task_offer, accept_task_offer,
    reject_task_offer, increment_missed_tasks
)
from config import PLATFORM_COMMISSION_RATE, ADMIN_ID

# Configure executor handlers logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

async def handle_task_offer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle executor's response to task offer."""
    query = update.callback_query
    user_id = query.from_user.id
    try:
        parts = query.data.split('_')
        action = parts[0]  # "accept" or "decline"
        task_id = int(parts[2])  # from "accept_task_123" or "decline_task_123"
    except (ValueError, IndexError):
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ—Ä–Ω–∏–π ID –∑–∞–≤–¥–∞–Ω–Ω—è")
        return

    # Check if task exists
    task = get_task(task_id)
    if not task:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # Check if task is still available (searching or offered)
    if task['status'] not in ['searching', 'offered']:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return

    # Check if there's a valid pending offer for this executor
    offer = get_task_offer(task_id, user_id)
    if not offer:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return

    if action == "accept":
        # Accept the task offer
        success = accept_task_offer(task_id, user_id)
        if success:
            # Cancel acceptance timer
            from utils.task_timer import TaskTimer
            await TaskTimer.cancel_timer(task_id)

            # Update offer status and reset missed tasks counter
            from database import reset_missed_tasks, update_task_offer_status
            update_task_offer_status(task_id, user_id, 'accepted')
            reset_missed_tasks(user_id)
            # Notify customer
            customer_text = f"""
‚úÖ <b>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–Ω–∞–π–¥–µ–Ω–∏–π!</b>

–ó–∞–≤–¥–∞–Ω–Ω—è #{task_id} –ø—Ä–∏–π–Ω—è—Ç–æ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.
–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∑–≤'—è–∂–µ—Ç—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.

–î–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∞—Ç-–±–æ—Ç (–±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ).
            """

            try:
                await context.bot.send_message(
                    chat_id=task['customer_id'],
                    text=customer_text,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"Failed to notify customer {task['customer_id']}: {e}")

            # Confirm to executor
            executor_text = f"""
‚úÖ <b>–ó–∞–≤–¥–∞–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>

ID: #{task_id}
–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: {task['price'] * (1 - PLATFORM_COMMISSION_RATE):.2f} –≥—Ä–Ω

<b>–û–ø–∏—Å:</b>
{task['description']}

–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∑–∞–º–æ–≤–Ω–∏–∫–æ–º —Ç–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ —Ä–æ–±–æ—Ç–∏!
            """

            keyboard = [[InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data="my_tasks")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(executor_text, reply_markup=reply_markup, parse_mode='HTML')

            # Create chat session for anonymous communication
            try:
                import asyncio
                from utils.chat_integration import send_chat_invitations
                chat_data = send_chat_invitations(task_id, task['customer_id'], user_id, context.bot)
                if chat_data and 'chat_code' in chat_data:
                    # Send invitations asynchronously
                    asyncio.create_task(context.bot.send_message(
                        chat_id=chat_data['customer_id'],
                        text=chat_data['customer_message'],
                        parse_mode='HTML'
                    ))
                    asyncio.create_task(context.bot.send_message(
                        chat_id=chat_data['executor_id'], 
                        text=chat_data['executor_message'],
                        parse_mode='HTML'
                    ))
                    logger.info(f"Chat session created for task {task_id} with code {chat_data['chat_code']}")
                else:
                    logger.warning(f"Failed to create chat session for task {task_id}")
            except Exception as e:
                logger.warning(f"Chat integration error: {e}")

        else:
            await query.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è")

    elif action == "decline":
        # Cancel acceptance timer
        from utils.task_timer import TaskTimer
        await TaskTimer.cancel_timer(task_id)

        # Reject the task offer
        success = reject_task_offer(task_id, user_id)

        if success:
            # Increment missed tasks counter (same as timeout)
            missed_count = increment_missed_tasks(user_id)

            # Reset task status to searching if no other pending offers
            from database import update_task
            update_task(task_id, status='searching', executor_id=None)

        # Prepare decline message with warning if needed
        decline_message = "‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.\n\n–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ —ñ–Ω—à–æ–º—É –≤–∏–∫–æ–Ω–∞–≤—Ü—é."

        await query.edit_message_text(decline_message, reply_markup=None, parse_mode='HTML')

        # Continue searching with next executor (exclude this executor)
        from utils.taxi_system import find_and_notify_executor
        await find_and_notify_executor(task_id, context.bot, exclude_executor=user_id)

async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle task completion by executor."""
    query = update.callback_query
    user_id = query.from_user.id
    task_id = int(query.data.split('_')[-1])

    task = get_task(task_id)
    if not task:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    if task['executor_id'] != user_id:
        await query.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
        return

    if task['status'] != 'in_progress':
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏")
        return

    # Mark as pending customer approval
    update_task(task_id, status='pending_approval')

    # Notify customer
    customer_text = f"""
üéØ <b>–ó–∞–≤–¥–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–µ!</b>

–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –ø–æ–∑–Ω–∞—á–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è #{task_id} —è–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–µ.

–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º–∏.
    """

    keyboard = [
        [InlineKeyboardButton("üëç –í—Å–µ –≥–∞—Ä–∞–∑–¥, –æ–ø–ª–∞—Ç–∏—Ç–∏", callback_data=f"approve_task_{task_id}")],
        [InlineKeyboardButton("‚õî –ü—Ä–æ–±–ª–µ–º–∞, –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–ø—ñ—Ä", callback_data=f"dispute_task_{task_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await context.bot.send_message(
            chat_id=task['customer_id'],
            text=customer_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        await query.edit_message_text(
            "‚úÖ –ó–∞–º–æ–≤–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.\n–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
            reply_markup=None
        )

    except Exception as e:
        logger.error(f"Failed to notify customer about completion: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞")

async def approve_task_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle task approval by customer."""
    query = update.callback_query
    user_id = query.from_user.id
    task_id = int(query.data.split('_')[-1])

    task = get_task(task_id)
    if not task:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    if task['customer_id'] != user_id:
        await query.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
        return

    if task['status'] != 'pending_approval':
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
        return

    # Calculate payment amounts
    executor_payment = task['price'] * (1 - PLATFORM_COMMISSION_RATE)

    # Transfer money to executor
    success = update_user_balance(task['executor_id'], executor_payment)

    # Release frozen funds from customer
    customer = get_user(task['customer_id'])
    frozen_amount = task['price']
    if task.get('is_vip'):
        from config import VIP_TASK_PRICE_LOW, VIP_TASK_PRICE_HIGH, VIP_TASK_THRESHOLD
        vip_cost = VIP_TASK_PRICE_LOW if task['price'] <= VIP_TASK_THRESHOLD else VIP_TASK_PRICE_HIGH
        frozen_amount += vip_cost

    update_user_balance(task['customer_id'], 0, -frozen_amount)

    if success:
        # Mark task as completed
        update_task(task_id, status='completed', completed_at='CURRENT_TIMESTAMP')

        # Notify executor
        executor_text = f"""
üéâ <b>–û–ø–ª–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞!</b>

–ó–∞–≤–¥–∞–Ω–Ω—è #{task_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {executor_payment:.2f} –≥—Ä–Ω

–î—è–∫—É—î–º–æ –∑–∞ —è–∫—ñ—Å–Ω—É —Ä–æ–±–æ—Ç—É!
        """

        try:
            await context.bot.send_message(
                chat_id=task['executor_id'],
                text=executor_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Failed to notify executor about payment: {e}")

        # Show rating interface to customer
        await show_rating_interface(query, task_id, 'customer', context)

    else:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É –∫–æ—à—Ç—ñ–≤")

async def dispute_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle dispute creation by customer."""
    query = update.callback_query
    user_id = query.from_user.id
    task_id = int(query.data.split('_')[-1])

    try:
        task = get_task(task_id)
        if not task:
            await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        if task['customer_id'] != user_id:
            await query.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
            return

        if task['status'] not in ['completed', 'in_progress']:
            await query.answer("‚ùå –°–ø—ñ—Ä –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∞–±–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
            return

        # Create dispute
        dispute_id = create_dispute(
            task_id=task_id,
            customer_id=task['customer_id'],
            executor_id=task['executor_id'],
            reason="–ó–∞–º–æ–≤–Ω–∏–∫ –æ—Å–ø–æ—Ä–∏–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"
        )

        if dispute_id:
            # Update task status
            update_task(task_id, status='dispute')

            # Get user info for better notifications
            customer = get_user(task['customer_id'])
            executor = get_user(task['executor_id'])

            # Notify admin bot
            admin_text = f"""
üö® <b>–ù–û–í–ò–ô –°–ü–Ü–†!</b>

üÜî <b>–°–ø—ñ—Ä:</b> #{dispute_id}
üìã <b>–ó–∞–≤–¥–∞–Ω–Ω—è:</b> #{task_id}
üí∞ <b>–¶—ñ–Ω–∞:</b> {task['price']} –≥—Ä–Ω
üìÖ <b>–°—Ç–≤–æ—Ä–µ–Ω–æ:</b> {task['created_at']}

üë• <b>–£—á–∞—Å–Ω–∏–∫–∏ —Å–ø–æ—Ä—É:</b>
üõí <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> {f"@{customer.get('username')}" if customer and customer.get('username') else f"ID: {task['customer_id']}"}
‚ö° <b>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:</b> {f"@{executor.get('username')}" if executor and executor.get('username') else f"ID: {task['executor_id']}"}

üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞ —Å–ø–æ—Ä—É:</b>
–ó–∞–º–æ–≤–Ω–∏–∫ –æ—Å–ø–æ—Ä–∏–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è

üìù <b>–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:</b>
{task['description'][:300]}{'...' if len(task['description']) > 300 else ''}

üîß <b>–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥—ñ—ó:</b>
‚Ä¢ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∞–¥–º—ñ–Ω-–±–æ—Ç–∞ (@Admin_fartobot)
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ —Å–ø–æ—Ä—É
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É
‚Ä¢ –ü—Ä–∏–π–º—ñ—Ç—å —Ä—ñ—à–µ–Ω–Ω—è
            """

            # Try to notify admin bot
            try:
                import httpx
                admin_bot_token = os.getenv("ADMIN_BOT_TOKEN")
                admin_user_id = os.getenv("ADMIN_ID", "5857065034")

                if admin_bot_token:
                    url = f"https://api.telegram.org/bot{admin_bot_token}/sendMessage"
                    data = {
                        "chat_id": admin_user_id,
                        "text": admin_text,
                        "parse_mode": "HTML"
                    }

                    async with httpx.AsyncClient() as client:
                        response = await client.post(url, data=data)

                    if response.status_code == 200:
                        logger.info(f"Admin notified about dispute {dispute_id}")
                    else:
                        logger.warning(f"Failed to notify admin: {response.status_code}")
                else:
                    logger.warning("Admin bot token not configured")

            except Exception as e:
                logger.error(f"Failed to notify admin about dispute: {e}")

            # Notify both parties
            dispute_text = f"""
‚ö†Ô∏è <b>–í—ñ–¥–∫—Ä–∏—Ç–æ —Å–ø—ñ—Ä</b>

–ü–æ –∑–∞–≤–¥–∞–Ω–Ω—é #{task_id} –≤—ñ–¥–∫—Ä–∏—Ç–æ —Å–ø—ñ—Ä.
–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ —Å–∏—Ç—É–∞—Ü—ñ—é —Ç–∞ –ø—Ä–∏–π–º–µ —Ä—ñ—à–µ–Ω–Ω—è.

üÜî <b>–°–ø—ñ—Ä ID:</b> #{dispute_id}
üí∞ <b>–ö–æ—à—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –¥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Å–ø–æ—Ä—É</b>

üìû <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> @Admin_fartobot
            """

            await query.edit_message_text(dispute_text, reply_markup=None, parse_mode='HTML')

            # Notify executor
            try:
                await context.bot.send_message(
                    chat_id=task['executor_id'],
                    text=dispute_text,
                    parse_mode='HTML'
                )
                logger.info(f"Executor {task['executor_id']} notified about dispute {dispute_id}")
            except Exception as e:
                logger.error(f"Failed to notify executor about dispute: {e}")

        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ—Ä—É")
            return

    except Exception as e:
        logger.error(f"Error in dispute_task: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ—Ä—É")

async def show_dispute_interface(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show dispute interface for customer."""
    query = update.callback_query
    user_id = query.from_user.id
    task_id = int(query.data.split('_')[-1])

    try:
        task = get_task(task_id)
        if not task:
            await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        if task['customer_id'] != user_id:
            await query.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
            return

        text = f"""
‚ö†Ô∏è <b>–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–ø–æ—Ä—É</b>

üìã <b>–ó–∞–≤–¥–∞–Ω–Ω—è:</b> #{task_id}
üí∞ <b>–¶—ñ–Ω–∞:</b> {task['price']} –≥—Ä–Ω

‚ùì <b>–ö–æ–ª–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ —Å–ø—ñ—Ä:</b>
‚Ä¢ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –Ω–µ –≤–∏–∫–æ–Ω–∞–≤ —Ä–æ–±–æ—Ç—É
‚Ä¢ –Ø–∫—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º
‚Ä¢ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚Ä¢ –Ü–Ω—à—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è —É–≥–æ–¥–∏

‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b>
–ü—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–ø–æ—Ä—É –∫–æ—à—Ç–∏ –±—É–¥—É—Ç—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –¥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å–ø—ñ—Ä?
        """

        keyboard = [
            [InlineKeyboardButton("‚ö†Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–ø—ñ—Ä", callback_data=f"confirm_dispute_{task_id}")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"task_details_{task_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error showing dispute interface: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å–ø–æ—Ä—É")

async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle task cancellation by customer."""
    query = update.callback_query
    user_id = query.from_user.id
    task_id = int(query.data.split('_')[-1])

    task = get_task(task_id)
    if not task:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    if task['customer_id'] != user_id:
        await query.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
        return

    if task['status'] != 'searching':
        await query.answer("‚ùå –ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ª–∏—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ø–æ—à—É–∫—É –≤–∏–∫–æ–Ω–∞–≤—Ü—è")
        return

    # Cancel task and refund money
    update_task(task_id, status='canceled')

    # Calculate refund amount
    refund_amount = task['price']
    if task.get('is_vip'):
        from config import VIP_TASK_PRICE_LOW, VIP_TASK_PRICE_HIGH, VIP_TASK_THRESHOLD
        vip_cost = VIP_TASK_PRICE_LOW if task['price'] <= VIP_TASK_THRESHOLD else VIP_TASK_PRICE_HIGH
        refund_amount += vip_cost

    # Refund money
    update_user_balance(user_id, refund_amount, -refund_amount)

    text = f"""
‚ùå <b>–ó–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>

–ó–∞–≤–¥–∞–Ω–Ω—è #{task_id} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.
–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: {refund_amount:.2f} –≥—Ä–Ω
    """

    keyboard = [[InlineKeyboardButton("üìã –ú–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data="my_tasks")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_rating_interface(query, task_id: int, user_type: str, context) -> None:
    """Show rating interface after task completion."""
    text = f"""
‚≠ê <b>–û—Ü—ñ–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É</b>

–ó–∞–≤–¥–∞–Ω–Ω—è #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å {'–≤–∏–∫–æ–Ω–∞–≤—Ü—è' if user_type == 'customer' else '–∑–∞–º–æ–≤–Ω–∏–∫–∞'} –∑–∞ 5-–±–∞–ª—å–Ω–æ—é —à–∫–∞–ª–æ—é:
    """

    keyboard = []
    for rating in range(1, 6):
        stars = "‚≠ê" * rating
        keyboard.append([InlineKeyboardButton(
            f"{stars} {rating}", 
            callback_data=f"rate_{task_id}_{user_type}_{rating}"
        )])

    keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_rating")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle rating submission."""
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "skip_rating":
        await query.edit_message_text("–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ROZDUM 2.0!", reply_markup=None)
        return

    try:
        _, task_id, user_type, rating = query.data.split('_')
        task_id = int(task_id)
        rating = int(rating)
    except ValueError:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É")
        return

    task = get_task(task_id)
    if not task:
        await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    # Determine who rates whom
    if user_type == 'customer':
        reviewer_id = task['customer_id']
        reviewed_id = task['executor_id']
        reviewed_role = "–≤–∏–∫–æ–Ω–∞–≤—Ü—è"
    else:
        reviewer_id = task['executor_id'] 
        reviewed_id = task['customer_id']
        reviewed_role = "–∑–∞–º–æ–≤–Ω–∏–∫–∞"

    if reviewer_id != user_id:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É")
        return

    # Add review
    success = add_review(task_id, reviewer_id, reviewed_id, rating)

    if success:
        text = f"""
‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!</b>

–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ {reviewed_role} –Ω–∞ {rating} {'–∑—ñ—Ä–∫—É' if rating == 1 else '–∑—ñ—Ä–∫–∏' if rating < 5 else '–∑—ñ—Ä–æ–∫'}.

–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏!
        """

        # Check if both parties have rated - then show final message
        from database import get_db_connection
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'SELECT COUNT(*) FROM reviews WHERE task_id = ?', 
            (task_id,)
        )
        review_count = cursor.fetchone()[0]
        conn.close()

        if review_count >= 2:
            text += "\n\nüéâ –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    else:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏")

# Handler list for main.py
executor_handlers = [
    CallbackQueryHandler(handle_task_offer, pattern="^(accept|decline)_task_"),
    CallbackQueryHandler(complete_task, pattern="^complete_task_"),
    CallbackQueryHandler(approve_task_completion, pattern="^approve_task_"),
    CallbackQueryHandler(show_dispute_interface, pattern="^dispute_task_"),
    CallbackQueryHandler(dispute_task, pattern="^confirm_dispute_"),
    CallbackQueryHandler(cancel_task, pattern="^cancel_task_"),
    CallbackQueryHandler(handle_rating, pattern="^(rate_|skip_rating)"),
]

async def send_task_offer_to_executor(bot, executor: dict, task: dict, chat_code: str) -> bool:
    """Send task offer to executor."""
    try:
        logger.info(f"üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—é @{executor.get('username', 'None')} (ID: {executor['user_id']}) –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{task['task_id']}")

        # Calculate commission and net earning
        from config import PLATFORM_COMMISSION_RATE
        commission = task['price'] * PLATFORM_COMMISSION_RATE
        net_earning = task['price'] - commission

        # Format task tags
        tags_text = ""
        if task.get('tags'):
            if isinstance(task['tags'], str):
                import json
                try:
                    tags = json.loads(task['tags'])
                except:
                    tags = []
            else:
                tags = task['tags'] or []

            if tags:
                # Translate tags to Ukrainian
                from utils.tag_translator import translate_tags_to_ukrainian
                ukrainian_tags = translate_tags_to_ukrainian(tags)
                tags_text = f"\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(ukrainian_tags)}"

        # Check for files
        files_text = ""
        try:
            from utils.file_handler import get_task_files_info
            files_info = get_task_files_info(task['task_id'])
            if files_info:
                files_text = f"\nüìé –§–∞–π–ª–∏: {len(files_info)} –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ"
        except:
            pass

        message = f"""
üöñ <b>–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∞—Å!</b>

üìã <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {task['category']}
{tags_text}
üí∞ <b>–¶—ñ–Ω–∞:</b> {format_price(task['price'])}
üíµ <b>–í–∞—à –∑–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {format_price(net_earning)} (–ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ—ó {PLATFORM_COMMISSION_RATE*100}%)
{'‚≠ê VIP –∑–∞–≤–¥–∞–Ω–Ω—è' if task.get('is_vip') else ''}

üìù <b>–û–ø–∏—Å:</b>
{task['description'][:500]}{'...' if len(task['description']) > 500 else ''}
{files_text}

üí¨ <b>–ö–æ–¥ —á–∞—Ç—É:</b> <code>{chat_code}</code>

–£ –≤–∞—Å —î 10 —Ö–≤–∏–ª–∏–Ω, —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
        """

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_task_{task['task_id']}"),
                InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"decline_task_{task['task_id']}")
            ],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫—É", url=f"https://t.me/Rozdum_ChatBot?start={chat_code}")]
        ]

        await bot.send_message(
            chat_id=executor['user_id'],
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

        logger.info(f"‚úÖ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é @{executor.get('username', 'None')} –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{task['task_id']}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—é {executor['user_id']} –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è #{task['task_id']}: {e}")
        return False