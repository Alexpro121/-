"""
Add give money command handler for admin.
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import create_user, get_user, update_user_balance, set_admin_status, is_admin
from config import UserStates, ADMIN_ID

logger = logging.getLogger(__name__)

def check_user_active_tasks(user_id: int) -> bool:
    """Check if user has active tasks (searching or in_progress)"""
    try:
        from database import get_db_connection
        conn = get_db_connection()
        cursor = conn.cursor()

        # Check for active tasks as customer or executor
        cursor.execute("""
            SELECT COUNT(*) FROM tasks 
            WHERE (customer_id = ? OR executor_id = ?) 
            AND status IN ('searching', 'in_progress')
        """, (user_id, user_id))

        count = cursor.fetchone()[0]
        conn.close()
        return count > 0
    except Exception as e:
        logger.error(f"Error checking active tasks: {e}")
        return False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    user = update.effective_user

    # Create user in database if not exists
    created = create_user(user.id, user.username)

    if created:
        logger.info(f"New user registered: {user.id} (@{user.username})")

    # Check for active tasks to show return to task panel button
    from database import get_user_tasks
    active_statuses = ['searching', 'in_progress']
    customer_tasks = [t for t in get_user_tasks(user.id, as_customer=True) 
                     if t['status'] in active_statuses]
    executor_tasks = [t for t in get_user_tasks(user.id, as_customer=False) 
                     if t['status'] in active_statuses]
    has_active_tasks = bool(customer_tasks or executor_tasks)

    welcome_text = """
üéì <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Rozdum!</b>

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—à—É–∫—É –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –ø—ñ–¥–±–æ—Ä–æ–º —Ç–∞ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞–º–∏.

üîπ <b>–û—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—ñ–¥–±—ñ—Ä –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –∑–∞ –Ω–∞–≤–∏—á–∫–∞–º–∏
‚Ä¢ –ë–µ–∑–ø–µ—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –µ—Å–∫—Ä–æ—É-–ø–ª–∞—Ç–µ–∂—ñ–≤  
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —è–∫–æ—Å—Ç—ñ
‚Ä¢ –ê–Ω–æ–Ω—ñ–º–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –≤–∏–∫–æ–Ω–∞–≤—Ü—è–º–∏

üîπ <b>–£–º–æ–≤–∏ —Ä–æ–±–æ—Ç–∏:</b>
‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî 25 –≥—Ä–Ω
‚Ä¢ VIP-—á–µ—Ä–≥–∞: 10 –≥—Ä–Ω (–¥–æ 100 –≥—Ä–Ω) / 15 –≥—Ä–Ω (–ø–æ–Ω–∞–¥ 100 –≥—Ä–Ω)
‚Ä¢ VIP-–≤–∏–∫–æ–Ω–∞–≤—Ü—ñ –º–∞—é—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ 4.0+
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è ‚Äî 10% (—Å–ø–ª–∞—á—É—î –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å)

üíº <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>
    """

    keyboard = [
        [InlineKeyboardButton("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="create_task")],
        [InlineKeyboardButton("üë§ –ú—ñ–π –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton("üìã –ú–æ—ó –ó–∞–≤–¥–∞–Ω–Ω—è", callback_data="my_tasks")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help")]
    ]

    # Add return to task panel button if user has active tasks
    if has_active_tasks:
        keyboard.insert(0, [InlineKeyboardButton("üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data="active_tasks")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle inline keyboard button presses."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    # Reset user state for main menu actions
    if data in ['create_task', 'my_profile', 'my_tasks', 'help', 'main_menu']:
        from database import update_user
        update_user(user_id, state=UserStates.NONE, temp_data={})

    if data == "main_menu":
        await start_command(update, context)

    elif data == "help":
        await show_help(update, context)

    elif data == "create_task":
        from handlers.tasks import start_task_creation
        await start_task_creation(update, context)

    elif data == "search_tasks":
        from handlers.tasks import search_available_tasks
        await search_available_tasks(update, context)

    elif data == "my_profile":
        from handlers.profile import show_profile
        await show_profile(update, context)

    elif data == "my_tasks":
        from handlers.tasks import show_my_tasks
        await show_my_tasks(update, context)

    # Handle delete temp file buttons
    elif data.startswith("delete_temp_file_"):
        from handlers.tasks import handle_delete_temp_file
        await handle_delete_temp_file(update, context)

    # Other handlers will be handled by their respective modules through the main.py handler registration
    else:
        await query.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")



async def give_money_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Test command to give money to users (available to all)."""
    user_id = update.effective_user.id

    # Parse command arguments
    if not context.args:
        await update.message.reply_text("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /give [—Å—É–º–∞]")
        return

    try:
        amount = float(context.args[0])
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É")
        return

    # Get target user (reply to message or current user)
    target_user_id = user_id
    if update.message.reply_to_message:
        target_user_id = update.message.reply_to_message.from_user.id

    # Give money
    success = update_user_balance(target_user_id, amount)

    if success:
        target_user = get_user(target_user_id)
        text = f"""
‚úÖ <b>–¢–µ—Å—Ç–æ–≤–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!</b>

üí∞ –í–∏–¥–∞–Ω–æ: {amount:.2f} –≥—Ä–Ω
üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {target_user_id}
üí≥ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {target_user['balance']:.2f} –≥—Ä–Ω
        """
        await update.message.reply_text(text, parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É")

async def admin_code_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /code_pas command for admin access."""
    user_id = update.effective_user.id
    args = context.args

    if not args:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏")
        return

    code = args[0]

    # Check if code is correct
    if code == "09111":
        # Set admin status
        if set_admin_status(user_id, True, 1):
            await update.message.reply_text(
                "‚úÖ <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∞ –Ω–∞–¥–∞–Ω–æ!</b>\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É –≤—Å—ñ—Ö –±–æ—Ç–∞—Ö —Å–∏—Å—Ç–µ–º–∏ Rozdum:\n"
                "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ç (@RozdumBot)\n"
                "‚Ä¢ –ß–∞—Ç-–±–æ—Ç (@Rozdum_ChatBot)\n"
                "‚Ä¢ –ê–¥–º—ñ–Ω-–±–æ—Ç (@Admin_fartobot)\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–¥–º—ñ–Ω-–±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é.",
                parse_mode='HTML'
            )
            logger.info(f"Admin access granted to user {user_id}")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤")
    else:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥")

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show help information."""
    help_text = """
<b>üìñ –î–æ–≤—ñ–¥–∫–∞ ROZDUM 2.0</b>

<b>üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞–≤–¥–∞–Ω—å:</b>
üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó - PowerPoint, Keynote, –¥–∏–∑–∞–π–Ω —Å–ª–∞–π–¥—ñ–≤
üìù –¢–µ–∫—Å—Ç–∏ - –∫–æ–ø—ñ—Ä–∞–π—Ç–∏–Ω–≥, —Å—Ç–∞—Ç—Ç—ñ, –µ—Å–µ, –Ω–∞—É–∫–æ–≤—ñ —Ä–æ–±–æ—Ç–∏  
üåê –ü–µ—Ä–µ–∫–ª–∞–¥–∏ - –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ç–µ–∫—Å—Ç–∏
üé® –î–∏–∑–∞–π–Ω - –ª–æ–≥–æ—Ç–∏–ø–∏, –±–∞–Ω–µ—Ä–∏, UI/UX, –¥—Ä—É–∫

<b>üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: 5%
‚Ä¢ –ï—Å–∫—Ä–æ—É: –∫–æ—à—Ç–∏ –∑–∞–º–æ—Ä–æ–∂—É—é—Ç—å—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
‚Ä¢ VIP –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: –ø–æ–∫–∞–∑ –ª–∏—à–µ —Ç–æ–ø-–≤–∏–∫–æ–Ω–∞–≤—Ü—è–º (4.8+ —Ä–µ–π—Ç–∏–Ω–≥)

<b>‚≠ê –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 5.0 –±–∞–ª—ñ–≤
‚Ä¢ –û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥ 1 –¥–æ 5 –±–∞–ª—ñ–≤
‚Ä¢ –í–ø–ª–∏–≤–∞—î –Ω–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å

<b>üöñ –°–∏—Å—Ç–µ–º–∞ –ø—ñ–¥–±–æ—Ä—É:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –∑–∞ —Ç–µ–≥–∞–º–∏ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑–∏
‚Ä¢ –í—Ä–∞—Ö–æ–≤—É—î —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å
‚Ä¢ –ß–∞—Å –Ω–∞ –ø—Ä–∏–π–Ω—è—Ç—Ç—è: 10 —Ö–≤–∏–ª–∏–Ω

<b>üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –ê–Ω–æ–Ω—ñ–º–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç
‚Ä¢ –ó–∞—Ö–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—É–±–ª—ñ—á–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤

–ó –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """

    keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='HTML')