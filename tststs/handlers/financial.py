"""
Financial operations handlers for Rozdum Bot
Handles balance top-ups, withdrawals, transaction history
"""

import logging
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from database import get_db_connection, get_user, update_user_balance
from utils.financial_system import (
    PaymentMethods, process_automatic_deposit, process_withdrawal,
    get_user_transactions, get_transaction_stats, format_transaction_history
)
from utils.helpers import format_currency, MessageBuilder
from config import UserStates

logger = logging.getLogger(__name__)

async def show_balance_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show balance management menu"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user = get_user(user_id)
    if not user:
        await query.edit_message_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        return
    
    # Get transaction stats
    stats = get_transaction_stats(user_id)
    
    earned_balance = user.get('earned_balance', 0.0)
    deposited_balance = user['balance'] - earned_balance
    
    text = f"""
üí∞ <b>–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä</b>

üí≥ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {format_currency(user['balance'])}
üí∞ <b>–ó–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ:</b> {format_currency(earned_balance)}
üí∏ <b>–í–Ω–µ—Å–µ–Ω–æ:</b> {format_currency(deposited_balance)}
üîí <b>–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ:</b> {format_currency(user['frozen_balance'])}

‚ÑπÔ∏è <i>–î–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∑–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ: {format_currency(earned_balance)}</i>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ: {format_currency(stats.get('total_deposits', 0))}
‚Ä¢ –í—Å—å–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–æ: {format_currency(stats.get('total_withdrawals', 0))}
‚Ä¢ –í—Å—å–æ–≥–æ –∑–∞—Ä–æ–±–∏–≤: {format_currency(stats.get('total_earnings', 0))}
‚Ä¢ –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: {format_currency(stats.get('total_spent', 0))}
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üí≥ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="add_balance"),
            InlineKeyboardButton("üí∏ –í–∏–≤–µ—Å—Ç–∏", callback_data="withdraw_balance")
        ],
        [
            InlineKeyboardButton("üìä –Ü—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π", callback_data="transaction_history")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def show_deposit_methods(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show available deposit methods"""
    query = update.callback_query
    
    text = """
üí≥ <b>–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É</b>

–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:

‚Ä¢ üí≥ <b>–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞</b> - –º–∏—Ç—Ç—î–≤–æ, –∫–æ–º—ñ—Å—ñ—è 2%
‚Ä¢ üè¶ <b>–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑</b> - –¥–æ 2 –≥–æ–¥–∏–Ω, –±–µ–∑ –∫–æ–º—ñ—Å—ñ—ó
‚Ä¢ ‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - –¥–æ 30 —Ö–≤–∏–ª–∏–Ω, –∫–æ–º—ñ—Å—ñ—è 1%
‚Ä¢ üåê <b>PayPal</b> - –º–∏—Ç—Ç—î–≤–æ, –∫–æ–º—ñ—Å—ñ—è 3%

–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: 50 –≥—Ä–Ω
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data=f"deposit_{PaymentMethods.CARD}"),
            InlineKeyboardButton("üè¶ –ü–µ—Ä–µ–∫–∞–∑", callback_data=f"deposit_{PaymentMethods.BANK_TRANSFER}")
        ],
        [
            InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"deposit_{PaymentMethods.CRYPTO}"),
            InlineKeyboardButton("üåê PayPal", callback_data=f"deposit_{PaymentMethods.PAYPAL}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="balance_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def handle_deposit_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle deposit method selection"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    method = query.data.split('_')[1]
    method_names = {
        PaymentMethods.CARD: "–±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏",
        PaymentMethods.BANK_TRANSFER: "–±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–∞–∑—É", 
        PaymentMethods.CRYPTO: "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏",
        PaymentMethods.PAYPAL: "PayPal"
    }
    
    text = f"""
üí≥ <b>–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {method_names.get(method, method)}</b>

–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–º—ñ–Ω—ñ–º—É–º 50 –≥—Ä–Ω):
    """
    
    # Store selected method in context
    context.user_data['deposit_method'] = method
    context.user_data['user_state'] = UserStates.ADDING_BALANCE
    
    await query.edit_message_text(text, parse_mode='HTML')

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process deposit amount input"""
    user_id = update.effective_user.id
    amount_text = update.message.text
    
    try:
        amount = float(amount_text.replace(',', '.'))
        
        if amount < 50:
            await update.message.reply_text("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: 50 –≥—Ä–Ω")
            return
        
        if amount > 50000:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: 50,000 –≥—Ä–Ω")
            return
        
        method = context.user_data.get('deposit_method', PaymentMethods.CARD)
        
        # Start deposit processing
        await update.message.reply_text(
            f"üîÑ –û–±—Ä–æ–±–∫–∞ –ø–ª–∞—Ç–µ–∂—É {format_currency(amount)}...\n\n"
            f"–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
        )
        
        # Simulate payment data (in real system would collect from user)
        payment_data = {
            'amount': amount,
            'currency': 'UAH',
            'method': method
        }
        
        # Process automatic deposit
        success = await process_automatic_deposit(user_id, amount, method, payment_data, context.bot)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø—ñ—à–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ {format_currency(amount)}!"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
            )
        
        # Clear state
        context.user_data['user_state'] = UserStates.NONE
        context.user_data.pop('deposit_method', None)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –∞–±–æ 100.50)")

async def show_withdrawal_methods(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show withdrawal methods"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user = get_user(user_id)
    earned_balance = user.get('earned_balance', 0.0) if user else 0.0
    
    if not user or earned_balance < 100:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è.\n\n"
            f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ: {format_currency(earned_balance)}\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 100 –≥—Ä–Ω\n\n"
            f"‚ÑπÔ∏è –ú–æ–∂–Ω–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –ª–∏—à–µ –∑–∞—Ä–æ–±–ª–µ–Ω—ñ –∫–æ—à—Ç–∏ –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å.",
            parse_mode='HTML'
        )
        return
    
    text = f"""
üí∏ <b>–í–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤</b>

üí∞ <b>–ó–∞—Ä–æ–±–ª–µ–Ω–æ–≥–æ (–¥–æ—Å—Ç—É–ø–Ω–æ):</b> {format_currency(earned_balance)}
üí≥ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {format_currency(user['balance'])}

‚ÑπÔ∏è <i>–î–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –∑–∞—Ä–æ–±–ª–µ–Ω–æ –≤—ñ–¥ –∑–∞–≤–¥–∞–Ω—å</i>

–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–∏–≤–µ–¥–µ–Ω–Ω—è:

‚Ä¢ üí≥ <b>–ù–∞ –∫–∞—Ä—Ç–∫—É</b> - –¥–æ 24 –≥–æ–¥–∏–Ω, –∫–æ–º—ñ—Å—ñ—è 15 –≥—Ä–Ω
‚Ä¢ üè¶ <b>–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑</b> - –¥–æ 3 –¥–Ω—ñ–≤, –∫–æ–º—ñ—Å—ñ—è 10 –≥—Ä–Ω
‚Ä¢ ‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - –¥–æ 2 –≥–æ–¥–∏–Ω, –∫–æ–º—ñ—Å—ñ—è 2%

–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: 100 –≥—Ä–Ω
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üí≥ –ù–∞ –∫–∞—Ä—Ç–∫—É", callback_data=f"withdraw_{PaymentMethods.CARD}"),
            InlineKeyboardButton("üè¶ –ü–µ—Ä–µ–∫–∞–∑", callback_data=f"withdraw_{PaymentMethods.BANK_TRANSFER}")
        ],
        [
            InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"withdraw_{PaymentMethods.CRYPTO}")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="balance_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def handle_withdrawal_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle withdrawal method selection"""
    query = update.callback_query
    
    method = query.data.split('_')[1]
    method_names = {
        PaymentMethods.CARD: "–∫–∞—Ä—Ç–∫—É",
        PaymentMethods.BANK_TRANSFER: "–±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑",
        PaymentMethods.CRYPTO: "–∫—Ä–∏–ø—Ç–æ–≥–∞–º–∞–Ω–µ—Ü—å"
    }
    
    text = f"""
üí∏ <b>–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ {method_names.get(method, method)}</b>

–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è (–º—ñ–Ω—ñ–º—É–º 100 –≥—Ä–Ω):
    """
    
    # Store selected method in context
    context.user_data['withdrawal_method'] = method
    context.user_data['user_state'] = UserStates.WITHDRAWING_BALANCE
    
    await query.edit_message_text(text, parse_mode='HTML')

async def process_withdrawal_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process withdrawal amount input"""
    user_id = update.effective_user.id
    amount_text = update.message.text
    
    try:
        amount = float(amount_text.replace(',', '.'))
        
        user = get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return
        
        earned_balance = user.get('earned_balance', 0.0)
        
        if amount < 100:
            await update.message.reply_text("‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: 100 –≥—Ä–Ω")
            return
        
        if amount > earned_balance:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞—Ä–æ–±–ª–µ–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {format_currency(earned_balance)}\n\n"
                f"‚ÑπÔ∏è –ú–æ–∂–Ω–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –ª–∏—à–µ –∑–∞—Ä–æ–±–ª–µ–Ω—ñ –∫–æ—à—Ç–∏ –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å."
            )
            return
        
        method = context.user_data.get('withdrawal_method', PaymentMethods.CARD)
        
        # Start withdrawal processing
        await update.message.reply_text(
            f"üîÑ –û–±—Ä–æ–±–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è {format_currency(amount)}...\n\n"
            f"–ö–æ—à—Ç–∏ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É."
        )
        
        # Simulate withdrawal data (in real system would collect details)
        withdrawal_data = {
            'amount': amount,
            'currency': 'UAH',
            'method': method
        }
        
        # Process withdrawal
        success = await process_withdrawal(user_id, amount, method, withdrawal_data, context.bot)
        
        if not success:
            await update.message.reply_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )
        
        # Clear state
        context.user_data['user_state'] = UserStates.NONE
        context.user_data.pop('withdrawal_method', None)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –∞–±–æ 100.50)")

async def show_transaction_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user transaction history"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    transactions = get_user_transactions(user_id, limit=20)
    history_text = format_transaction_history(transactions)
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="balance_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(history_text, reply_markup=reply_markup, parse_mode='HTML')

# Callback handlers mapping
FINANCIAL_CALLBACKS = {
    'balance_menu': show_balance_menu,
    'add_balance': show_deposit_methods,
    'withdraw_balance': show_withdrawal_methods,
    'transaction_history': show_transaction_history
}

def register_financial_callback(callback_data: str, query, context):
    """Register financial callback handler"""
    if callback_data in FINANCIAL_CALLBACKS:
        return FINANCIAL_CALLBACKS[callback_data]
    elif callback_data.startswith('deposit_'):
        return handle_deposit_method
    elif callback_data.startswith('withdraw_'):
        return handle_withdrawal_method
    return None