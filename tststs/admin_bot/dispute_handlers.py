
"""
Dispute handling system for admin bot
"""

import logging
import os
import sys
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# Add parent directory to path for database access
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from database import (get_open_disputes, get_dispute, resolve_dispute, update_task, 
                      update_user_balance, get_task, get_user, init_database, get_db_connection)

logger = logging.getLogger(__name__)

async def show_active_disputes_list(query, context) -> None:
    """Show list of active disputes"""
    try:
        # Ensure database is initialized
        init_database()
        disputes = get_open_disputes()
        
        if not disputes:
            text = "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ—Ä—ñ–≤ –Ω–µ–º–∞—î</b>\n\n–í—Å—ñ —Å–ø–æ—Ä–∏ –≤–∏—Ä—ñ—à–µ–Ω–æ!"
            keyboard = [[InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]]
        else:
            text = f"‚ö†Ô∏è <b>–ê–ö–¢–ò–í–ù–Ü –°–ü–û–†–ò ({len(disputes)})</b>\n\n"
            keyboard = []
            
            for dispute in disputes[:10]:  # Show first 10
                text += f"üÜî –°–ø—ñ—Ä #{dispute['dispute_id']}\n"
                text += f"üìã –ó–∞–≤–¥–∞–Ω–Ω—è: #{dispute['task_id']}\n"
                text += f"üí∞ –°—É–º–∞: {dispute['price']:.2f} –≥—Ä–Ω\n"
                text += f"üìÖ –î–∞—Ç–∞: {dispute['created_at'][:10]}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìã –†–æ–∑–≥–ª—è–Ω—É—Ç–∏ —Å–ø—ñ—Ä #{dispute['dispute_id']}", 
                        callback_data=f"view_dispute_{dispute['dispute_id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="active_disputes")])
            keyboard.append([InlineKeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error showing disputes list: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–æ—Ä—ñ–≤")

async def show_dispute_details(query, dispute_id: int, context) -> None:
    """Show detailed dispute information"""
    try:
        dispute = get_dispute(dispute_id)
        
        if not dispute:
            await query.edit_message_text("‚ùå –°–ø—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        customer_name = dispute.get('customer_username') or f"ID:{dispute['customer_id']}"
        executor_name = dispute.get('executor_username') or f"ID:{dispute['executor_id']}"
        
        text = f"""
‚ö†Ô∏è <b>–î–ï–¢–ê–õ–Ü –°–ü–û–†–£ #{dispute_id}</b>

üìã <b>–ó–∞–≤–¥–∞–Ω–Ω—è:</b> #{dispute['task_id']}
üí∞ <b>–°—É–º–∞:</b> {dispute['price']:.2f} –≥—Ä–Ω
üìÖ <b>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</b> {dispute['created_at'][:16]}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {dispute['category']}

üë• <b>–£—á–∞—Å–Ω–∏–∫–∏ —Å–ø–æ—Ä—É:</b>
üõí <b>–ó–∞–º–æ–≤–Ω–∏–∫:</b> {customer_name}
‚ö° <b>–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:</b> {executor_name}

üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞ —Å–ø–æ—Ä—É:</b>
{dispute['reason']}

üìù <b>–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è:</b>
{dispute['description'][:300]}{'...' if len(dispute['description']) > 300 else ''}

üîß <b>–†—ñ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
        """
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ù–∞ –∫–æ—Ä–∏—Å—Ç—å –∑–∞–º–æ–≤–Ω–∏–∫–∞", callback_data=f"resolve_dispute_{dispute_id}_customer"),
                InlineKeyboardButton("üîß –ù–∞ –∫–æ—Ä–∏—Å—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è", callback_data=f"resolve_dispute_{dispute_id}_executor")
            ],
            [
                InlineKeyboardButton("üìÑ –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É", callback_data=f"view_chat_history_{dispute['task_id']}")
            ],
            [
                InlineKeyboardButton("üë§ –Ü–Ω—Ñ–æ –∑–∞–º–æ–≤–Ω–∏–∫–∞", callback_data=f"user_info_{dispute['customer_id']}"),
                InlineKeyboardButton("üîß –Ü–Ω—Ñ–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è", callback_data=f"user_info_{dispute['executor_id']}")
            ],
            [
                InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É —Å–ø–æ—Ä—ñ–≤", callback_data="active_disputes")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error showing dispute details: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Å–ø–æ—Ä—É")

async def resolve_dispute_handler(query, dispute_id: int, resolution: str, context) -> None:
    """Handle dispute resolution"""
    try:
        admin_id = query.from_user.id
        
        # Get dispute details
        dispute = get_dispute(dispute_id)
        if not dispute:
            await query.answer("‚ùå –°–ø—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        task = get_task(dispute['task_id'])
        if not task:
            await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # Resolve dispute in database
        admin_decision = f"–†—ñ—à–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å {'–∑–∞–º–æ–≤–Ω–∏–∫–∞' if resolution == 'customer' else '–≤–∏–∫–æ–Ω–∞–≤—Ü—è'}"
        success = resolve_dispute(dispute_id, resolution, admin_id, admin_decision)
        
        if not success:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Å–ø–æ—Ä—É")
            return
        
        # Handle money transfers
        if resolution == "customer":
            # Return money to customer: unfreeze and add to balance
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE users SET frozen_balance = frozen_balance - ?, balance = balance + ?
                WHERE user_id = ?
            """, (task['price'], task['price'], dispute['customer_id']))
            conn.commit()
            conn.close()
            update_task(dispute['task_id'], status='cancelled')
            
            result_text = f"""
‚úÖ <b>–°–ü–Ü–† –í–ò–†–Ü–®–ï–ù–û –ù–ê –ö–û–†–ò–°–¢–¨ –ó–ê–ú–û–í–ù–ò–ö–ê</b>

üÜî –°–ø—ñ—Ä #{dispute_id}
üìã –ó–∞–≤–¥–∞–Ω–Ω—è #{dispute['task_id']}
üí∞ –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫—É: {task['price']:.2f} –≥—Ä–Ω

üìù –ó–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.
            """
            
        elif resolution == "executor":
            # Pay executor
            executor_payment = task['price'] * 0.9  # 10% commission
            conn = get_db_connection()
            cursor = conn.cursor()
            # Unfreeze customer money and pay executor
            cursor.execute("""
                UPDATE users SET frozen_balance = frozen_balance - ?
                WHERE user_id = ?
            """, (task['price'], dispute['customer_id']))
            cursor.execute("""
                UPDATE users SET balance = balance + ?, earned_balance = earned_balance + ?
                WHERE user_id = ?
            """, (executor_payment, executor_payment, dispute['executor_id']))
            conn.commit()
            conn.close()
            update_task(dispute['task_id'], status='completed')
            
            result_text = f"""
‚úÖ <b>–°–ü–Ü–† –í–ò–†–Ü–®–ï–ù–û –ù–ê –ö–û–†–ò–°–¢–¨ –í–ò–ö–û–ù–ê–í–¶–Ø</b>

üÜî –°–ø—ñ—Ä #{dispute_id}
üìã –ó–∞–≤–¥–∞–Ω–Ω—è #{dispute['task_id']}
üí∞ –í–∏–ø–ª–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é: {executor_payment:.2f} –≥—Ä–Ω
üí≥ –ö–æ–º—ñ—Å—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {task['price'] * 0.1:.2f} –≥—Ä–Ω

üìù –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
            """
        
        # Notify participants
        try:
            # Notify customer
            customer_message = f"""
{'‚úÖ' if resolution == 'customer' else '‚ùå'} <b>–°–ü–Ü–† –í–ò–†–Ü–®–ï–ù–û</b>

üÜî –°–ø—ñ—Ä #{dispute_id}
üìã –ó–∞–≤–¥–∞–Ω–Ω—è #{dispute['task_id']}

{'üéâ –†—ñ—à–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É –∫–æ—Ä–∏—Å—Ç—å!' if resolution == 'customer' else 'üòî –†—ñ—à–µ–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è'}

{f'üí∞ –ü–æ–≤–µ—Ä–Ω–µ–Ω–æ: {task["price"]:.2f} –≥—Ä–Ω' if resolution == 'customer' else 'üí∞ –ö–æ—à—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—é'}

üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @Admin_fartobot
            """
            
            await context.bot.send_message(
                chat_id=dispute['customer_id'],
                text=customer_message,
                parse_mode='HTML'
            )
            
            # Notify executor
            executor_message = f"""
{'‚ùå' if resolution == 'customer' else '‚úÖ'} <b>–°–ü–Ü–† –í–ò–†–Ü–®–ï–ù–û</b>

üÜî –°–ø—ñ—Ä #{dispute_id}
üìã –ó–∞–≤–¥–∞–Ω–Ω—è #{dispute['task_id']}

{'üòî –†—ñ—à–µ–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å –∑–∞–º–æ–≤–Ω–∏–∫–∞' if resolution == 'customer' else 'üéâ –†—ñ—à–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—É –∫–æ—Ä–∏—Å—Ç—å!'}

{f'üí∞ –û—Ç—Ä–∏–º–∞–Ω–æ: {task["price"] * 0.9:.2f} –≥—Ä–Ω' if resolution == 'executor' else 'üí∞ –ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫—É'}

üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @Admin_fartobot
            """
            
            await context.bot.send_message(
                chat_id=dispute['executor_id'],
                text=executor_message,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error notifying participants: {e}")
        
        # Show result to admin
        keyboard = [
            [InlineKeyboardButton("‚ö†Ô∏è –Ü–Ω—à—ñ —Å–ø–æ—Ä–∏", callback_data="active_disputes")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(result_text, reply_markup=reply_markup, parse_mode='HTML')
        
        logger.info(f"Dispute {dispute_id} resolved in favor of {resolution} by admin {admin_id}")
        
    except Exception as e:
        logger.error(f"Error resolving dispute: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Å–ø–æ—Ä—É")

# Export dispute handlers
dispute_handlers = {
    'show_active_disputes_list': show_active_disputes_list,
    'show_dispute_details': show_dispute_details,
    'resolve_dispute_handler': resolve_dispute_handler,
}
