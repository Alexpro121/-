"""
Rating and review system for chat bot
"""

import logging
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from database import get_user, get_task, add_review, get_user_reviews, get_user_rating_history

logger = logging.getLogger(__name__)

async def show_rating_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show rating request after task completion."""
    query = update.callback_query
    user_id = query.from_user.id

    try:
        # Extract task_id and role from callback data
        _, task_id, role = query.data.split('_')
        task_id = int(task_id)

        task = get_task(task_id)
        if not task:
            await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        # Determine who rates whom
        if role == 'customer':
            reviewer_id = task['customer_id']
            reviewed_id = task['executor_id']
            reviewed_role = "–≤–∏–∫–æ–Ω–∞–≤—Ü—è"
        else:
            reviewer_id = task['executor_id']
            reviewed_id = task['customer_id']
            reviewed_role = "–∑–∞–º–æ–≤–Ω–∏–∫–∞"

        if reviewer_id != user_id:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É")
            return

        text = f"""
‚≠ê <b>–û—Ü—ñ–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É</b>

–ó–∞–≤–¥–∞–Ω–Ω—è #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å {reviewed_role} –∑–∞ 5-–±–∞–ª—å–Ω–æ—é —à–∫–∞–ª–æ—é:

üåü 1 - –î—É–∂–µ –ø–æ–≥–∞–Ω–æ
üåüüåü 2 - –ü–æ–≥–∞–Ω–æ  
üåüüåüüåü 3 - –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ
üåüüåüüåüüåü 4 - –î–æ–±—Ä–µ
üåüüåüüåüüåüüåü 5 - –í—ñ–¥–º—ñ–Ω–Ω–æ
        """

        keyboard = []
        for rating in range(1, 6):
            stars = "‚≠ê" * rating
            keyboard.append([InlineKeyboardButton(
                f"{stars} {rating}", 
                callback_data=f"rate_{task_id}_{role}_{rating}"
            )])

        keyboard.append([InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_rating")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error showing rating request: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É")

async def handle_rating_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle rating submission."""
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "skip_rating":
        await query.edit_message_text(
            "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ROZDUM 2.0! üéâ",
            reply_markup=None
        )
        return

    try:
        _, task_id, role, rating = query.data.split('_')
        task_id = int(task_id)
        rating = int(rating)

        task = get_task(task_id)
        if not task:
            await query.answer("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        # Determine who rates whom
        if role == 'customer':
            reviewer_id = task['customer_id']
            reviewed_id = task['executor_id']
            reviewed_role = "–≤–∏–∫–æ–Ω–∞–≤—Ü—è"
        else:
            reviewer_id = task['executor_id']
            reviewed_id = task['customer_id']
            reviewed_role = "–∑–∞–º–æ–≤–Ω–∏–∫–∞"

        if reviewer_id != user_id:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É")
            return

        # Show comment input request
        context.user_data['pending_review'] = {
            'task_id': task_id,
            'reviewer_id': reviewer_id,
            'reviewed_id': reviewed_id,
            'rating': rating,
            'reviewed_role': reviewed_role
        }

        text = f"""
‚úÖ <b>–û—Ü—ñ–Ω–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞: {rating} {'–∑—ñ—Ä–∫–∞' if rating == 1 else '–∑—ñ—Ä–∫–∏' if rating < 5 else '–∑—ñ—Ä–æ–∫'}</b>

–ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ {reviewed_role}? 

–í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–æ–∂–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä.

üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        """

        keyboard = [[InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä", callback_data="submit_rating_no_comment")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error handling rating submission: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É")

async def handle_rating_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle rating comment input."""
    user_id = update.effective_user.id

    if 'pending_review' not in context.user_data:
        return

    comment = update.message.text.strip()

    if len(comment) > 500:
        await update.message.reply_text("‚ùå –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    try:
        review_data = context.user_data['pending_review']

        # Add review with comment
        success = add_review(
            task_id=review_data['task_id'],
            reviewer_id=review_data['reviewer_id'],
            reviewed_id=review_data['reviewed_id'],
            rating=review_data['rating'],
            comment=comment
        )

        if success:
            await finalize_rating(update, context, review_data, comment)
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É")

        # Clear pending review
        del context.user_data['pending_review']

    except Exception as e:
        logger.error(f"Error handling rating comment: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—é")

async def submit_rating_no_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Submit rating without comment."""
    query = update.callback_query

    if 'pending_review' not in context.user_data:
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É")
        return

    try:
        review_data = context.user_data['pending_review']

        # Add review without comment
        success = add_review(
            task_id=review_data['task_id'],
            reviewer_id=review_data['reviewer_id'],
            reviewed_id=review_data['reviewed_id'],
            rating=review_data['rating']
        )

        if success:
            await finalize_rating_query(query, context, review_data)
        else:
            await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É")

        # Clear pending review
        del context.user_data['pending_review']

    except Exception as e:
        logger.error(f"Error submitting rating without comment: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É")

async def finalize_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, review_data: dict, comment: str = None) -> None:
    """Finalize rating process."""
    text = f"""
üéâ <b>–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!</b>

–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ {review_data['reviewed_role']} –Ω–∞ {review_data['rating']} {'–∑—ñ—Ä–∫—É' if review_data['rating'] == 1 else '–∑—ñ—Ä–∫–∏' if review_data['rating'] < 5 else '–∑—ñ—Ä–æ–∫'}.

{'üìù –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä: "' + comment + '"' if comment else ''}

–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏! ‚≠ê
    """

    await update.message.reply_text(text, parse_mode='HTML')

async def finalize_rating_query(query, context: ContextTypes.DEFAULT_TYPE, review_data: dict) -> None:
    """Finalize rating process from callback query."""
    text = f"""
üéâ <b>–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!</b>

–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ {review_data['reviewed_role']} –Ω–∞ {review_data['rating']} {'–∑—ñ—Ä–∫—É' if review_data['rating'] == 1 else '–∑—ñ—Ä–∫–∏' if review_data['rating'] < 5 else '–∑—ñ—Ä–æ–∫'}.

–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏! ‚≠ê
    """

    await query.edit_message_text(text, reply_markup=None, parse_mode='HTML')

async def show_user_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user's rating statistics and reviews."""
    query = update.callback_query
    user_id = query.from_user.id

    try:
        # Extract target user ID from callback data if present
        if '_' in query.data:
            target_user_id = int(query.data.split('_')[-1])
        else:
            target_user_id = user_id

        # Get rating statistics
        stats = get_user_rating_stats(target_user_id)
        reviews = get_user_reviews(target_user_id, limit=10)

        if not stats:
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É</b>\n\n–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–∫–∏ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫."
        else:
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É</b>

‚≠ê –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['average_rating']:.1f}/5.0
üìà –í—Å—å–æ–≥–æ –æ—Ü—ñ–Ω–æ–∫: {stats['total_reviews']}
üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å: {stats['completed_tasks']}

üìä <b>–†–æ–∑–ø–æ–¥—ñ–ª –æ—Ü—ñ–Ω–æ–∫:</b>
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑—ñ—Ä–æ–∫: {stats.get('rating_5', 0)}
‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑—ñ—Ä–∫–∏: {stats.get('rating_4', 0)}
‚≠ê‚≠ê‚≠ê 3 –∑—ñ—Ä–∫–∏: {stats.get('rating_3', 0)}
‚≠ê‚≠ê 2 –∑—ñ—Ä–∫–∏: {stats.get('rating_2', 0)}
‚≠ê 1 –∑—ñ—Ä–∫–∞: {stats.get('rating_1', 0)}
            """

        if reviews:
            text += "\n\nüí¨ <b>–û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏:</b>\n"
            for review in reviews:
                stars = "‚≠ê" * review['rating']
                text += f"\n{stars} {review['rating']}/5"
                if review.get('comment'):
                    comment = review['comment'][:100] + "..." if len(review['comment']) > 100 else review['comment']
                    text += f"\nüí≠ \"{comment}\""
                text += f"\nüìÖ {review['created_at'][:10]}\n"

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"reviews_{target_user_id}")],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        logger.error(f"Error showing user reviews: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤")

# Rating handler exports
rating_handlers = [
    CallbackQueryHandler(show_rating_request, pattern="^rating_"),
    CallbackQueryHandler(handle_rating_submission, pattern="^rate_"),
    CallbackQueryHandler(submit_rating_no_comment, pattern="^submit_rating_no_comment$"),
    CallbackQueryHandler(show_user_reviews, pattern="^reviews"),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_rating_comment),
]